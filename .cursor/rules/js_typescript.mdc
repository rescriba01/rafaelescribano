---
description: JS & TypeScript Best Practices.
globs: **/*.js, **/*.ts
---
# JavaScript Coding Standards

## Core Principles
- Stick to Vanilla JavaScript with ES6+ features (`let`, `const`, arrow functions).
- Modularize JavaScript with ES6 modules (import/export).
- Leverage GSAP (React GSAP included) where possible!
- Use Promises and async/await instead of callbacks for asynchronous tasks.
- Avoid jQuery unless required for compatibility with third-party plugins.
- Use wp_localize_script() for passing PHP data to JS instead of global variables.
- Defer or asynchronously load scripts for performance `(wp_enqueue_script( ..., ..., [ 'async' => true ]))`.

## Best Practices
- Use `async/await` and Promises for API requests.
- Organize API requests in reusable functions.
- Use `wp_localize_script()` for passing dynamic data to JavaScript.
- Avoid polluting the global namespace (use IIFEs or ES modules).

- ### GSAP General Advice
  - Filters are TERRIBLE for performance, especially in Safari. Avoid them if you can. 
  - In 95%+ of cases, performance issues are related to graphics rendering in the browser (unrelated to GSAP). So focus your energy on making it easier for the browser to render stuff quickly. 
  - Keep the area of change on the screen as tight as possible. The more pixels that must change on each tick, the harder it is on the browser.
  - SVGs can be expensive to animate, especially if they're big (pixel real estate, not kb). Rendering bitmaps/raster images is fast, but SVGs are typically fabricating pixels on-the-fly via math (expensive). 
  - Set `pointer-events: none` wherever you can so that the browser doesn't have to worry about pointer event handling, bubbling, etc. But obviously you NEED pointer functionality on many things like buttons, links, etc. so you can't set `pointer-events: none` on everything. 
  - Avoid animating properties that affect layout like width/height/top/left. Instead, animate transforms wherever you can because they don't affect layout. 
  - When animating transforms, leverage GSAP's shortcuts wherever possible (like `x`, `y`, `scaleX`, `scaleY`, `rotation`) rather than generic string-based "transform" stuff. Example `x: 50` is much better than `transform: "translateX(50px)"`.
  - Don't have animations running when they're totally outside of the viewport (invisible)! It's a waste of resources.
  - If you are pushing the renderer hard in the browser, consider switching to something like PixiJS that can leverage `<canvas>` and WebGL. It's a headache to build, but it can be WAY faster at rendering. 
  - Never have CSS transitions/animations applied to elements that are also being animated with GSAP. 
  - Try using `will-change: transform` on elements that are tough on the renderer (big/heavy). 

## Naming Conventions
- Use `camelCase` for variables and functions.
- Use `PascalCase` for classes and constructors.


### References
[.cursorrules](mdc:.cursorrules)
[WordPress-dev-guidelines.md](mdc:WordPress-dev-guidelines.md)
[general.mdc](mdc:.cursor/rules/general.mdc)
[css_styling.mdc](mdc:.cursor/rules/css_styling.mdc)


